{"version":3,"sources":["common/LangChartConfig.js","components/LangChart.js"],"names":["credits","enabled","chart","type","backgroundColor","width","title","text","xAxis","categories","yAxis","labels","formatter","this","value","plotOptions","spline","lineWidth","states","hover","marker","series","animation","duration","responsive","rules","condition","maxWidth","chartOptions","legend","layout","align","verticalAlign","tooltip","color","name","y","toFixed","LangChart","props","visible","useState","ChartConfig","state","setState","_","debounce","dataLength","percentageData","data","total","pipe","map","unzip","sum","zipData","update","x","zipWith","divide","fillZeros","HistSize","size","max","d","Array","fill","concat","createSeriesPercentage","top","Math","floor","uniqBy","reject","o","includes","convert","cap","i","GitHubColors","get","random","toString","filter","createSeries","constructChart","length","newState","isEqual","updateState","tickLength","q","range","flatten","drop","a","lang","match","params","split","undefined","store","take","sortBy","table","useEffect","loadChart","hist","style","margin","highcharts","Highcharts","options"],"mappings":"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","file":"static/js/6.edcfc1ee.chunk.js","sourcesContent":["/**\n * Config for the language chart\n * Contains initial Highcharts configuration\n * Please note that the license for this file is\n * not AGPL-3.0 since Highcharts is licensed under CC BY-NC 3.0\n * If Highcharts gets replaced in the future this class will\n * be rewritten and licensed under AGPL-3.0\n * @author Fabian Beuke <mail@beuke.org>\n * @license CC BY-NC 3.0\n * @see {@link https://creativecommons.org/licenses/by-nc/3.0/}\n */\n\n\nexport default {\n    credits: { enabled: false },\n    chart: { type: \"spline\", backgroundColor: \"transparent\", width: 1400 },\n    title: { text: \"\" },\n    xAxis: { categories: [] },\n    yAxis: {\n        title: {\n            text: \"\",\n        },\n        labels: {\n            formatter: function () {\n                return this.value * 100 + \"%\"\n            },\n        },\n    },\n    plotOptions: {\n        spline: {\n            lineWidth: 3,\n            states: { hover: { lineWidth: 5 } },\n            marker: { enabled: false },\n        },\n        series: {\n            animation: {\n                duration: 200,\n            },\n        },\n    },\n    responsive: {\n        rules: [\n            {\n                condition: {\n                    maxWidth: 1400,\n                },\n                chartOptions: {\n                    chart: { width: null },\n                    legend: {\n                        layout: \"horizontal\",\n                        align: \"center\",\n                        verticalAlign: \"bottom\",\n                    },\n                },\n            },\n        ],\n    },\n    tooltip: {\n        formatter: function () {\n            return (\n                '<span style=\"color:' +\n                this.series.color +\n                '\">' +\n                this.series.name +\n                \"</span>: <b>\" +\n                (this.y * 100).toFixed(2) +\n                \"%</b>\"\n            )\n        },\n    },\n}\n\n","/**\n * Programming language popularity chart based on Highcharts\n * Please note that this file is dual licensed since Highcharts\n * is licensed under CC BY-NC 3.0\n * If Highcharts gets replaced in the future this class\n * will be licensed under AGPL-3.0 only\n * @author Fabian Beuke <mail@beuke.org>\n * @license AGPL-3.0 everything except Highcharts\n * @license CC BY-NC 3.0 Highcharts\n * @see {@link https://creativecommons.org/licenses/by-nc/3.0/}\n */\n\nimport { useState, useEffect } from \"react\";\nimport ChartConfig from \"common/LangChartConfig\"\nimport Highcharts from \"highcharts\"\nimport HighchartsReact from \"highcharts-react-official\"\nimport GitHubColors from \"github-colors\"\nimport _ from \"lodash/fp\"\n\nexport default function LangChart(props) {\n\n    const [state, setState] = useState(ChartConfig)\n    const [debounce] = useState(() => _.debounce(200)(setState))\n    let dataLength = 0\n    let visible\n    const style = {\n        margin: \"auto\",\n        maxWidth: \"100%\",\n    }\n\n    /**\n     * Creates Highcharts xAxis categories since 2012\n     * quarter wise: 2012/Q1, 2012/Q2, ...\n     * @returns {Object} xAxis categories (year/quarter)\n     */\n    function categories() {\n        return _.pipe(\n            _.map((y) => _.map((q) => (q === 1 ? y : \"\")), _.range(1, 5)),\n            _.flatten,\n            _.drop(1)\n        )(_.range(2012, 2050))\n    }\n\n    /**\n     * Calculates relative / percentage of series data\n     * Example: Pull Request -> JavaScript 22.2%, C# 4%, ..\n     * @param {Object} current - GitHub api data set\n     * @returns {Object} Data series with percentage data\n     */\n    function percentageData(data) {\n        const total = _.pipe(_.map(\"data\"), _.unzip, _.map(_.sum))(data)\n        const zipTotal = (x) => _.zipWith(_.divide, x)(total)\n        const zipData = _.pipe(_.update(\"data\"))(zipTotal)\n        return _.map(zipData, data)\n    }\n\n    /**\n     * Adds zeros if we dont have enough historical data. For example,\n     * there is no data for Typescript in 2012/Q2.\n     * @param {Object} current - GitHub api data set\n     * @returns {Object} Data series filled with zeros if required\n     */\n    function fillZeros(data) {\n        const HistSize = _.pipe(_.map(\"data\"), _.map(_.size), _.max)(data)\n        const fill = (d) => new Array(HistSize - _.size(d)).fill(0).concat(d)\n        return _.map(_.update(\"data\", fill))(data)\n    }\n\n    /**\n     * Creates a data series for highcharts based on GitHub raw api data\n     * Filters top 10 languages\n     * @param {Object} current - GitHub api data set\n     * @returns {Object} Data series for top 10 languages\n     */\n    const createSeries = (top) => (data) => {\n        return _.pipe(\n            _.uniqBy(\"name\"),\n            _.reject((o) => !_.includes(o.name)(top)),\n            _.map.convert({ cap: 0 })((d, i) => ({\n                name: d.name,\n                color: GitHubColors.get(d.name)\n                    ? GitHubColors.get(d.name).color // or random color\n                    : \"#\" + Math.floor(Math.random() * 16777215).toString(16),\n                visible: visible ? visible.includes(d.name) : i < 7,\n                data: _.map(\"count\")(_.filter({ name: d.name })(data)),\n            })),\n            fillZeros\n        )(data)\n    }\n\n    /*\n     * Updates react state if state has changed\n     */\n    function updateState(newState) {\n        if (!_.isEqual(state, newState)) {\n            debounce(newState)\n        }\n    }\n\n    /*\n     * Creates a new percentage series of data\n     */\n    function createSeriesPercentage(data, top) {\n        return _.pipe(\n            _.map(_.update(\"count\")(Math.floor)),\n            createSeries(top),\n            percentageData\n        )(data)\n    }\n\n    /**\n     * Creates a new chart if state has changed\n     */\n    function constructChart(data, title, top) {\n        if (data.length === dataLength && _.size(top) === 0) {\n            return\n        }\n\n        dataLength = data.length\n        const newState = {\n            ...state,\n            yAxis: {\n                ...state.yAxis,\n                title: { text: title },\n            },\n            series: createSeriesPercentage(data, top),\n            xAxis: { tickLength: 0, categories: categories() },\n        }\n        updateState(newState)\n    }\n\n    async function loadChart(){\n        const { lang } = props.match.params\n        visible = lang ? lang.split(\",\") : undefined\n        const [store] = props.store\n        const data = await store.data\n        const title = store.name\n        const top = _.pipe(\n            _.take(50),\n            _.sortBy(\"name\"),\n            _.map(\"name\")\n        )(props.table[0].data)\n        constructChart(data, title, top)\n    }\n\n    /**\n     * Native react function, called on component mount and\n     * on every prop change event\n     */\n    useEffect(() => {\n       loadChart()\n    }, [props.hist, props.store, props.table])\n\n    if (state && state.series && state.series.length === 0) return null\n    return (\n        <center>\n            <div style={style}>\n                <HighchartsReact highcharts={Highcharts} options={state} />\n            </div>\n        </center>\n    )\n}\n"],"sourceRoot":""}