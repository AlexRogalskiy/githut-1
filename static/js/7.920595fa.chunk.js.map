{"version":3,"sources":["common/NoLanguages.js","common/RenameLanguages.js","components/LangTable.js"],"names":["vim","before","after","fortran","LangTable","store","hist","table","useState","data","state","setState","filterNonProgrammingLanguages","_","reject","o","includes","name","NoLanguages","applyLanguageRenamings","map","update","r","find","RenameLanguages","findByName","pipe","filter","first","omitBy","isNil","getTrend","current","last","c","assign","trend","id","take","getChange","change","count","createTable","date","year","quarter","addSortId","convert","cap","i","percentageData","pick","filterDate","a","dec","toString","curYearRanking","lastYearRanking","trendRanking","langRanking","isEqual","dispatch","type","payload","total","Number","sum","d","useEffect","mountTable","length","className","style","margin","maxWidth","condensed","striped","tableStyle","width","bordered","dataAlign","dataField","isKey","dataFormat","cell","row","font","color","percent","toFixed","countPercent","repeat","n","isNaN","angle","dir","arrow"],"mappings":"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","file":"static/js/7.920595fa.chunk.js","sourcesContent":["/**\n * Contains all languages that are no programming lanuages\n * @author Fabian Beuke <mail@beuke.org>\n * @license AGPL-3.0\n * @see {@link https://github.com/github/linguist/blob/master/lib/linguist/languages.yml}\n */\nexport default [\n    \"ApacheConf\",\n    \"ApacheConf\",\n    \"Arduino\",\n    \"Batchfile\",\n    \"BitBake\",\n    \"CMAKE\",\n    \"CMake\",\n    \"CSS\",\n    \"Dockerfile\",\n    \"GCC Machine Description\",\n    \"Gettext Catalog\",\n    \"Gherkin\",\n    \"Groff\",\n    \"HCL\",\n    \"HTML\",\n    \"Handlebars\",\n    \"Jupyter Notebook\",\n    \"Lex\",\n    \"M4\",\n    \"Makefile\",\n    \"NSIS\",\n    \"Nginx\",\n    \"PLSQL\",\n    \"PLpgSQL\",\n    \"Perl6\",\n    \"Protocol Buffer\",\n    \"QMake\",\n    \"SaltStack\",\n    \"Starlark\",\n    \"Scilab\",\n    \"Smarty\",\n    \"TeX\",\n    \"Vue\",\n    \"XML\",\n    \"XSLT\",\n    \"Yacc\",\n]\n","/**\n * Keeps language renamings that can happen\n * when the github api decides to change the language name,\n * to keep consistency we always choose the latest name and\n * replace all older names\n * @author Fabian Beuke <mail@beuke.org>\n * @license AGPL-3.0\n */\n\nexport default {\n    vim: {\n        before: [\"VimL\"],\n        after: \"Vim script\",\n    },\n    fortran: {\n        before: [\"FORTRAN\"],\n        after: \"Fortran\",\n    },\n}\n","/**\n * The LangTable contains the top 50 programming languages\n * for a given quarter, e.g. 2017/Q2\n * Features: Trend, Percentage & Change, History, different data sets\n * PR/Push/Stars ...\n * @author Fabian Beuke <mail@beuke.org>\n * @license AGPL-3.0\n */\n\nimport { useState, useEffect } from \"react\";\nimport { BootstrapTable, TableHeaderColumn } from \"react-bootstrap-table\"\nimport NoLanguages from \"common/NoLanguages\"\nimport RenameLanguages from \"common/RenameLanguages\"\nimport _ from \"lodash/fp\"\n\nexport default function LangTable({store, hist, table}) {\n    const [state, setState] = useState({ data: [] })\n    const style = {\n        margin: \"auto\",\n        maxWidth: 810,\n    }\n\n    /**\n     * Filter data set by year and quarter\n     * @param {Object} data - GitHub api data set\n     * @param {number} year - Example 2017\n     * @param {number} quarter - Example 2\n     */\n    function filterDate(data, year, quarter) {\n        return _.pipe(\n            _.filter({ year: year, quarter: quarter }),\n            _.map(_.pick([\"name\", \"count\"]))\n        )(data)\n    }\n\n    /**\n     * The GitHub API keeps track of languages such as\n     * Jupyter Notebook in which we are not interested,\n     * since these are no programming languages\n     * Filters non programming languages\n     * @param {Object} data - GitHub api data set\n     */\n    function filterNonProgrammingLanguages(data) {\n        return _.reject((o) => _.includes(o.name)(NoLanguages))(data)\n    }\n\n    /**\n     * The GitHub API changes names (language renamings),\n     * therefore we keep track of them and always choose\n     * the latest name (replace old names) to keep consistency\n     * @param {Object} data - GitHub api data set\n     */\n    function applyLanguageRenamings(data) {\n        const rename = (name) => {\n            const r = _.find((o) => _.includes(name, o.before))(RenameLanguages)\n            return r ? r.after : name\n        }\n        return _.map(_.update(\"name\")(rename))(data)\n    }\n\n    /**\n     * Two up arrows: more than 3 ranks up or previoulsy unkown\n     * Two down arrorw: more than 3 ranks down\n     * One up arrow: 1-3 ranks up\n     * One down arrow: 1-3 ranks down\n     * Nothing: no change\n     * @param {Object} cell - Cell content of the table\n     * @param {Object} row - Row content of the table\n     */\n    function trendFormatter(cell, _) {\n        const arrow = (n) => {\n            const angle = (dir) => `<i class='fa fa-angle-${dir}'></i>`\n            switch (true) {\n                case n === 0:\n                    return \"\"\n                case n > 3:\n                    return angle(\"double-up\")\n                case n < -3:\n                    return angle(\"double-down\")\n                case n < 0:\n                    return angle(\"down\")\n                case n > 0:\n                    return angle(\"up\")\n                default:\n                    // direct jump to top 50 and previously unkown\n                    return angle(\"double-up\")\n            }\n        }\n        return `${arrow(cell)}`\n    }\n\n    /**\n     * Lemma function filters dataset by name and returns first it finds\n     * @param {Object} data - GitHub api data set\n     * @param {string} name - Name to search for\n     * @returns {Object} Search result\n     */\n    function findByName(data, name) {\n        return _.pipe(_.filter({ name: name }), _.first, _.omitBy(_.isNil))(data)\n    }\n\n    /**\n     * Calculate the trend difference in ranking over a one year period\n     * @param {Object} current - GitHub api data set current year\n     * @param {Object} last - GitHub api data set last year\n     * @returns {Object} Data set ++ trend diff\n     */\n    function getTrend(current, last) {\n        return _.pipe(\n            _.map((c) =>\n                _.assign({\n                    trend: findByName(last, c.name).id - c.id,\n                })(c)\n            ),\n            _.take(50)\n        )(current)\n    }\n\n    /**\n     * Calculate the percental change in ranking over a one year period\n     * @param {Object} current - GitHub api data set current year\n     * @param {Object} last - GitHub api data set last year\n     * @returns {Object} Data set ++ change as number\n     */\n    function getChange(current, last) {\n        return _.pipe(\n            _.map((c) =>\n                _.assign({\n                    change: c.count - findByName(last, c.name).count,\n                })(c)\n            ),\n            _.take(50)\n        )(current)\n    }\n\n    /**\n     * Composition of multiple functions, such as non programming\n     * language filter, language renaming and indexing to create\n     * a table from a raw data set for a given year and quarter\n     * @param {Object} data - GitHub api data set\n     * @param {number} year - e.g. 2017\n     * @param {number} quarter - e.g. 2\n     * @returns {Object} filtered and indexed data set (table)\n     */\n    function createTable(date, year, quarter) {\n        const addSortId = _.map.convert({ cap: 0 })((o, i) =>\n            _.assign({ id: ++i })(o)\n        )\n\n        return _.pipe(\n            filterNonProgrammingLanguages,\n            applyLanguageRenamings,\n            addSortId,\n            percentageData\n        )(filterDate(date, year, quarter))\n    }\n\n    /**\n     * Sets ranking table state based on given props (api data)\n     * Gets called on componentDidMount and sets react state on prop change\n     */\n    async function mountTable() {\n\n        const data = await store[0].data\n        const { year, quarter } = hist[0]\n        const dec = (i) => _.toString(--i)\n\n        const curYearRanking = createTable(data, year, quarter)\n        const lastYearRanking = createTable(data, dec(year), quarter)\n        const trendRanking = getTrend(curYearRanking, lastYearRanking)\n        const langRanking = getChange(trendRanking, lastYearRanking)\n\n        if (!_.isEqual(state.data, langRanking)) {\n            const [, dispatch] = table\n            dispatch({ type: \"set\", payload: langRanking })\n            setState({ data: langRanking })\n        }\n    }\n\n    /**\n     * Converts the absolute raw counts to percentage values\n     * A \"count\" is e.g. the number of Pull Requests per language\n     * @param {Object} data - GitHub api data set\n     * @returns {Object} Data set with percentage count\n     */\n    function percentageData(data) {\n        const total = _.pipe(_.map(\"count\"), _.map(Number), _.sum)(data)\n        return _.pipe(_.map(_.update(\"count\")((d) => d / total)))(data)\n    }\n\n    /**\n     * Native react function, called on component mount and\n     * on every prop change\n     */\n    useEffect(() => {\n        mountTable()\n    }, [hist, table])\n\n    /**\n     * Formatter that applies color, percentage and change from raw\n     * cell data, make it visual grokkable\n     * @param {Object} cell - Cell content of the table\n     * @param {Object} row - Row content of the table\n     * @returns {Object} Formatted cell content\n     */\n    function percentFormatter(cell, row) {\n        const font = (i, color) =>\n            `<font size=\"1\">(<font color=\"${color}\">${i}%</font>)</font>`\n        const colorize = (i) =>\n            i >= 0 ? font(\"+\" + i, \"green\") : font(i, \"chrimson\")\n        const percent = (i) => (i * 100).toFixed(3)\n        const countPercent = (percent(row.count)) + \"%\"\n        // NaN can happen in case of new first seen languages,\n        // hence we say 0% change\n        const normalize = (n) => (_.isNaN(n) ? 0.0 : n)\n        const offset = \"\\u00A0\".repeat(6)\n        return (\n            offset +\n            (row.id > 30\n                ? countPercent\n                : `${\n                      countPercent +\n                      \"  \" +\n                      (_.pipe(normalize, percent, colorize)(row.change))\n                  }`)\n        )\n    }\n\n    /**\n     * Provides empty default table when no data is available or data is\n     * still loading\n     * @returns {Object} html content for emtpy table\n     */\n    function noDataAvailableYet() {\n        return (\n            <div className=\"emptyTable\">\n                <h2>No data available for time period yet</h2>\n            </div>\n        )\n    }\n\n    if (state.data.length < 50) return noDataAvailableYet()\n    return (\n        <div style={style}>\n            <BootstrapTable\n                condensed\n                striped\n                tableStyle={{ margin: \"30px auto 30px auto\", width: \"100%\" }}\n                data={state.data}\n                bordered={false}\n            >\n                <TableHeaderColumn\n                    width=\"50px\"\n                    dataAlign=\"center\"\n                    dataField=\"id\"\n                    isKey={true}\n                >\n                    # Ranking\n                </TableHeaderColumn>\n                <TableHeaderColumn\n                    width=\"150px\"\n                    dataAlign=\"center\"\n                    dataField=\"name\"\n                >\n                    Programming Language\n                </TableHeaderColumn>\n                <TableHeaderColumn\n                    width=\"100px\"\n                    dataField=\"count\"\n                    dataAlign=\"left\"\n                    dataFormat={percentFormatter}\n                >\n                    Percentage (YoY Change)\n                </TableHeaderColumn>\n                <TableHeaderColumn\n                    width=\"50px\"\n                    dataAlign=\"center\"\n                    dataField=\"trend\"\n                    dataFormat={trendFormatter}\n                >\n                    YoY Trend\n                </TableHeaderColumn>\n            </BootstrapTable>\n        </div>\n    )\n}\n"],"sourceRoot":""}